--Historically
node H(X:bool) returns (Y:bool);
let
    Y = X -> (X and (pre Y));
tel

--Y since inclusive X
node SI(X,Y: bool) returns (Z:bool);
let
Z = Y and (X or (false -> pre Z));
tel

--Y since X
node S(X,Y: bool) returns (Z:bool);
let
Z = X or (Y and (false -> pre Z));
tel

--Once
node O(X:bool) returns (Y:bool);
let
 Y = X or (false -> pre Y);
tel

--Timed Once: less than or equal to N
node OTlore( N: int; X: bool) returns (Y: bool);
    var C:int;
let
    C = if X then 0
        else (-1 -> pre C + (if pre C <0 then 0 else 1));

    Y = 0 <= C and C <= N;
tel

--Timed Once: general case
node OT( L: int;  R: int; X: bool) returns (Y: bool);
var  D:bool;
let
  D=delay(X, R);
  Y=OTlore(L-R, D);
tel

-- Timed Historically: general case
node HT( L: int;  R: int; X: bool) returns (Y: bool);
let
  Y = not OT(L, R, not X);
tel

-- Timed Since: general case
node ST( L: int;  R: int; X: bool; Y: bool)  returns (Z: bool);
let
  Z = S(X, Y) and OT(L, R, X);
tel

-- Timed Since Inclusive: general case
node SIT( L: int;  R: int; X: bool; Y: bool) returns (Z: bool);
let
  Z = SI(X, Y) and OT(L, R, X);
tel

-- Pre for integers, with an initial value at FTP
node preInt(InitialValue, X: int) returns (Y:int);
let
  Y = InitialValue -> pre X;
tel

-- Pre for reals, with an initial value at FTP
node preReal(InitialValue, X: real) returns (Y:real);
let
  Y = InitialValue -> pre X;
tel

-- Pre for booleans, with an initial value at FTP
node preBool(InitialValue, X: bool) returns (Y:bool);
let
  Y = InitialValue -> pre X;
tel

-- The equivalent of LTL's Y in Lustre.
node YtoPre(X: bool) returns (Y:bool);
let
  Y = false -> pre X;
tel

-- The equivalent of LTL's Z in Lustre.
node ZtoPre(X: bool) returns (Y:bool);
let
  Y = true -> pre X;
tel

-- Absolute value for reals
node absReal(x:real) returns(y: real);
let
  y = if (x >= 0.0) then x else -x;
tel

-- Absolute value for integers
node absInt(x:int) returns(y: int);
let
  y = if (x >= 0) then x else -x;
tel

-- Maximum value between two reals
node maxReal (a : real; b : real)
returns (z : real);
let
  z = (if (((a) >= (b))) then (a) else (b));
tel

-- Maximum value between two integers
node maxInt (a : int; b : int)
returns (z : int);
let
  z = (if (((a) >= (b))) then (a) else (b));
tel

-- Minimum value between two integers
node minInt (a : int; b : int)
returns (z : int);
let
  z = (if (((a) <= (b))) then (a) else (b));
tel

-- Minimum value between two reals
node minReal (a : real; b : real)
returns (z : real);
let
  z = (if (((a) <= (b))) then (a) else (b));
tel

node delay(X:bool;  R:int) returns(Y:bool);
let

  Y = if (R=0) then X
      else if (R=5) then delay5(X)
      else delay6(X);

tel

node delay5(X:bool) returns(Y:bool);
var  X_0,  X_1,  X_2,  X_3,  X_4, X_5 :bool;
let
  X_0=X;
  X_1=false -> pre X_0;
  X_2=false -> pre X_1;
  X_3=false -> pre X_2;
  X_4=false -> pre X_3;
  X_5=false -> pre X_4;
  Y = X_5;
tel

node delay6(X:bool) returns(Y:bool);
var  X_0,  X_1,  X_2,  X_3,  X_4,  X_5, X_6 :bool;
let
  X_0=X;
  X_1=false -> pre X_0;
  X_2=false -> pre X_1;
  X_3=false -> pre X_2;
  X_4=false -> pre X_3;
  X_5=false -> pre X_4;
  X_6=false -> pre X_5;
  Y = X_6;
tel


(*@contract EV_energy_management_systemSpec (battery_level:int; grid_load:real; receipt_of_charging_request_command:bool; ) returns (low_power_mode: bool; optimal_battery_usage: bool; );

let
var __FTP: bool = true -> false;


var ON: bool = 1;

var YES: bool = grid_demand_peak;

var low: bool = grid_load;

var moving: bool = EV_state;


var EV_discharge_mode: bool = if grid_demand_peak = LOW then EV_discharge_mode = ON;

var EV_state: bool = if battery_level < 20 then EV_state = LOW_POWER;

var energy_efficiency_mode: bool = if energy_efficiency_mode = ON then optimal_battery_usage = ON;

 mode EV_discharge_mode_mode (
  require EV_discharge_mode;
 );

 mode EV_state_mode (
  require EV_state;
 );

 mode energy_efficiency_mode_mode (
  require energy_efficiency_mode;
 );



(* Req text: Upon  receipt_of_charging_request_command & grid_load = low  the  EV_energy_management_system  shall  always  satisfy  grid_load = low   *)
guarantee "REQ-01.04" ONHON((ONHON(ONnotON ((ONreceipt_of_charging_request_commandON ONandON (ONgrid_loadON = ONlowON)))) ONorON (ONgrid_loadON = ONlowON)));


(* Req text: The  EV_energy_management_system  shall always satisfy  battery_level <= 100/100   *)
guarantee "REQ-01.02" ONHON((ONbattery_levelON <= (ON100ON / ON100ON)));


(* Req text:  EV_energy_management_system  shall always satisfy if ( EV_state = moving  &  battery_level < 20 ) then  low_power_mode = ON   *)
guarantee "REQ-01.01" ONHON((((ONEV_stateON = ONmovingON) ONandON (ONbattery_levelON < ON20ON)) => (ONlow_power_modeON = ONONON)));


(* Req text:  If grid_demand_peak = YES  the  EV_energy_management_system  shall  within 5 seconds  satisfy  EV_discharge_mode = ON   *)
guarantee "REQ-01.03" ONHON((ONOTON(ON5ON, ON5ON, (((ONgrid_demand_peakON = ONYESON) ONandON ONZtoPreON(ONnotON ((ONgrid_demand_peakON = ONYESON)))) ONandON ONnotON ((ONEV_discharge_modeON = ONONON)))) => ONOTON(ON4ON, ON0ON, (ONZtoPreON(ONfalseON) ONorON (ONEV_discharge_modeON = ONONON)))));


(* Req text:  If energy_efficiency_mode = ON  the  EV_energy_management_system  shall  immediately  satisfy  optimal_battery_usage = ON   *)
guarantee "REQ-01" ONHON((((ONenergy_efficiency_modeON = ONONON) ONandON ONZtoPreON(ONnotON ((ONenergy_efficiency_modeON = ONONON)))) => (ONoptimal_battery_usageON = ONONON)));


tel
*)

