--Historically
node H(X:bool) returns (Y:bool);
let
    Y = X -> (X and (pre Y));
tel

--Y since inclusive X
node SI(X,Y: bool) returns (Z:bool);
let
Z = Y and (X or (false -> pre Z));
tel

--Y since X
node S(X,Y: bool) returns (Z:bool);
let
Z = X or (Y and (false -> pre Z));
tel

--Once
node O(X:bool) returns (Y:bool);
let
 Y = X or (false -> pre Y);
tel

--Timed Once: less than or equal to N
node OTlore( N: int; X: bool) returns (Y: bool);
    var C:int;
let
    C = if X then 0
        else (-1 -> pre C + (if pre C <0 then 0 else 1));

    Y = 0 <= C and C <= N;
tel

--Timed Once: general case
node OT( L: int;  R: int; X: bool) returns (Y: bool);
var  D:bool;
let
  D=delay(X, R);
  Y=OTlore(L-R, D);
tel

-- Timed Historically: general case
node HT( L: int;  R: int; X: bool) returns (Y: bool);
let
  Y = not OT(L, R, not X);
tel

-- Timed Since: general case
node ST( L: int;  R: int; X: bool; Y: bool)  returns (Z: bool);
let
  Z = S(X, Y) and OT(L, R, X);
tel

-- Timed Since Inclusive: general case
node SIT( L: int;  R: int; X: bool; Y: bool) returns (Z: bool);
let
  Z = SI(X, Y) and OT(L, R, X);
tel

-- Pre for integers, with an initial value at FTP
node preInt(InitialValue, X: int) returns (Y:int);
let
  Y = InitialValue -> pre X;
tel

-- Pre for reals, with an initial value at FTP
node preReal(InitialValue, X: real) returns (Y:real);
let
  Y = InitialValue -> pre X;
tel

-- Pre for booleans, with an initial value at FTP
node preBool(InitialValue, X: bool) returns (Y:bool);
let
  Y = InitialValue -> pre X;
tel

-- The equivalent of LTL's Y in Lustre.
node YtoPre(X: bool) returns (Y:bool);
let
  Y = false -> pre X;
tel

-- The equivalent of LTL's Z in Lustre.
node ZtoPre(X: bool) returns (Y:bool);
let
  Y = true -> pre X;
tel

-- Absolute value for reals
node absReal(x:real) returns(y: real);
let
  y = if (x >= 0.0) then x else -x;
tel

-- Absolute value for integers
node absInt(x:int) returns(y: int);
let
  y = if (x >= 0) then x else -x;
tel

-- Maximum value between two reals
node maxReal (a : real; b : real)
returns (z : real);
let
  z = (if (((a) >= (b))) then (a) else (b));
tel

-- Maximum value between two integers
node maxInt (a : int; b : int)
returns (z : int);
let
  z = (if (((a) >= (b))) then (a) else (b));
tel

-- Minimum value between two integers
node minInt (a : int; b : int)
returns (z : int);
let
  z = (if (((a) <= (b))) then (a) else (b));
tel

-- Minimum value between two reals
node minReal (a : real; b : real)
returns (z : real);
let
  z = (if (((a) <= (b))) then (a) else (b));
tel

node delay(X:bool;  R:int) returns(Y:bool);
let

  Y = X;
tel


(*@contract EV_navigation_systemSpec (EV_routing_request:bool; battery_level:int; charging_station_nearby:bool; distance_to_emergency_vehicle:real; distance_to_light:real; emergency_vehicle_detected:bool; pedestrian_detected:bool; road_conditions:int; traffic_light_state:int; traffic_rules:bool; ) returns (continue_search_for_station: bool; optimal_route_update: bool; stopping_action: bool; traffic_compliance: bool; updated_route: bool; );

let
var __FTP: bool = true -> false;


var ACTIVE: bool = traffic_rules;

var CONGESTED: bool = traffic_conditions;

var NORMAL: bool = road_conditions;

var ON: bool = 1;

var OPTIMAL: bool = updated_route;

var RED: int = traffic_light_state;

var YELLOW: int = traffic_light_state;




(* Req text: Upon  pedestrian_detected  the  EV_navigation_system  shall  immediately  satisfy  stopping_action   *)
guarantee "REQ-05.02" ONHON(((ONpedestrian_detectedON ONandON ONZtoPreON(ONnotON (ONpedestrian_detectedON))) => ONstopping_actionON));


(* Req text: Upon  traffic_jam_detected = ON  the  EV_navigation_system  shall  immediately  satisfy  optimal_route_update   *)
guarantee "REQ-03.01" ONHON((((ONtraffic_jam_detectedON = ONONON) ONandON ONZtoPreON(ONnotON ((ONtraffic_jam_detectedON = ONONON)))) => ONoptimal_route_updateON));


(* Req text: Upon ( traffic_light_state = YELLOW  &  distance_to_light < 20 )  EV_navigation_system  shall at the next timepoint satisfy  stopping_action = ON   *)
guarantee "REQ-05.03" ONHON((ONYtoPreON((((ONtraffic_light_stateON = ONYELLOWON) ONandON (ONdistance_to_lightON < ON20ON)) ONandON ONZtoPreON(ONnotON (((ONtraffic_light_stateON = ONYELLOWON) ONandON (ONdistance_to_lightON < ON20ON)))))) => ((ONstopping_actionON = ONONON) ONorON ONZtoPreON(ONfalseON))));


(* Req text:  EV_navigation_system  shall always satisfy if preBool(false,  battery_level < 20/100  & !(  charging_station_nearby )) then  continue_search_for_station = ON   *)
guarantee "REQ-03.02" ONHON((ONYtoPreON(((ONbattery_levelON < (ON20ON / ON100ON)) ONandON ONnotON (ONcharging_station_nearbyON))) => (ONcontinue_search_for_stationON = ONONON)));


(* Req text:  EV_navigation_system  shall always satisfy if ( traffic_rules = ACTIVE  &  road_conditions = NORMAL ) then  traffic_compliance = ON   *)
guarantee "REQ-05" ONHON((((ONtraffic_rulesON = ONACTIVEON) ONandON (ONroad_conditionsON = ONNORMALON)) => (ONtraffic_complianceON = ONONON)));


(* Req text:  EV_navigation_system  shall always satisfy if ( traffic_light_state = RED  &  distance_to_light < 50 ) then  stopping_action = ON   *)
guarantee "REQ-05.01" ONHON((((ONtraffic_light_stateON = ONREDON) ONandON (ONdistance_to_lightON < ON50ON)) => (ONstopping_actionON = ONONON)));


(* Req text:  EV_navigation_system  shall always satisfy if ( emergency_vehicle_detected = ON  &  distance_to_emergency_vehicle < 20 ) then  stopping_action = ON   *)
guarantee "REQ-05.04" ONHON((((ONemergency_vehicle_detectedON = ONONON) ONandON (ONdistance_to_emergency_vehicleON < ON20ON)) => (ONstopping_actionON = ONONON)));


(* Req text: Upon ( traffic_conditions = CONGESTED  &  EV_routing_request = ON )  EV_navigation_system  shall at the next timepoint satisfy  updated_route = OPTIMAL   *)
guarantee "REQ-03" ONHON((ONYtoPreON((((ONtraffic_conditionsON = ONCONGESTEDON) ONandON (ONEV_routing_requestON = ONONON)) ONandON ONZtoPreON(ONnotON (((ONtraffic_conditionsON = ONCONGESTEDON) ONandON (ONEV_routing_requestON = ONONON)))))) => ((ONupdated_routeON = ONOPTIMALON) ONorON ONZtoPreON(ONfalseON))));


tel
*)

